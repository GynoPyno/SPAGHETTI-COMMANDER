---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by maudlin27.
--- DateTime: 20/09/2021 20:28
---

local M27MapInfo = import('/mods/M27AI/lua/AI/M27MapInfo.lua')
local M27Utilities = import('/mods/M27AI/lua/M27Utilities.lua')
local M27PlatoonUtilities = import('/mods/M27AI/lua/AI/M27PlatoonUtilities.lua')
local M27Logic = import('/mods/M27AI/lua/AI/M27GeneralLogic.lua')
local M27Conditions = import('/mods/M27AI/lua/AI/M27CustomConditions.lua')
local M27Overseer = import('/mods/M27AI/lua/AI/M27Overseer.lua')

local iInitialEngineersWanted = 4

--Category quickrefs
local refCategoryEngineer = categories.LAND * categories.MOBILE * categories.ENGINEER - categories.COMMAND
local refCategoryAttackBot = categories.LAND * categories.MOBILE * categories.DIRECTFIRE * categories.BOT --NOTE: Need to specify fastest (for cybran who have mantis and LAB)
local refCategoryDFTank = categories.LAND * categories.MOBILE * categories.DIRECTFIRE - categories.SCOUT - categories.ANTIAIR --NOTE: Need to specify slowest (so dont pick LAB)
local refCategoryLandScout = categories.LAND * categories.MOBILE * categories.SCOUT
local refCategoryMAA = categories.LAND * categories.MOBILE * categories.ANTIAIR


function GetBlueprintsThatCanBuildOfCategory(iCategoryCondition, oFactory, bGetSlowest, bGetFastest)
    local bDebugMessages = false
    local sFunctionRef = 'GetBlueprintsThatCanBuildOfCategory'
    local tBlueprints = EntityCategoryGetUnitList(iCategoryCondition)
    local tValidBlueprints = {}
    local iValidBlueprints = 0
    local tBestBlueprints = {}
    local iBestBlueprints = 0
    local iHighestTech = 1
    local iCurrentTech = 1
    if bGetSlowest == nil then bGetSlowest = false end
    if bGetFastest == nil then bGetFastest = false end
    local iCurSpeed
    local tiLowestSpeedByTech = {1000, 1000, 1000}
    local tiHighestSpeedByTech = {0,0,0}
    local oCurBlueprint

    for _, sBlueprint in tBlueprints do
        if oFactory:CanBuild(sBlueprint) == true then
            iValidBlueprints = iValidBlueprints + 1
            tValidBlueprints[iValidBlueprints] = sBlueprint
            if EntityCategoryContains(categories.TECH3, sBlueprint) then iCurrentTech = 3
            elseif EntityCategoryContains(categories.TECH2, sBlueprint) then iCurrentTech = 2
            else iCurrentTech = 1
            end
            if bDebugMessages == true then LOG(sFunctionRef..': '..sBlueprint..': iCurrentTech='..iCurrentTech..'; iHighestTech='..iHighestTech) end
            if iCurrentTech >= iHighestTech then
                iHighestTech = iCurrentTech
                if bGetSlowest == true or bGetFastest == true then
                    oCurBlueprint = __blueprints[sBlueprint]
                    iCurSpeed = oCurBlueprint.Physics.MaxSpeed
                    if bDebugMessages == true then LOG(sFunctionRef..': '..sBlueprint..': iCurSpeed='..iCurSpeed) end
                    if bGetSlowest == true then
                        if iCurSpeed < tiLowestSpeedByTech[iCurrentTech] then tiLowestSpeedByTech[iCurrentTech] = iCurSpeed end
                    elseif bGetFastest == true then
                        if iCurSpeed > tiHighestSpeedByTech[iCurrentTech] then tiHighestSpeedByTech[iCurrentTech] = iCurSpeed end
                    end
                end
            end
        end
    end
    --Now get a list of blueprints that are this tech level
    if bDebugMessages == true then LOG(sFunctionRef..': iHighestTech='..iHighestTech..'; tiHighestSpeedByTech='..tiHighestSpeedByTech[iHighestTech]..'; bGetSlowest='..tostring(bGetSlowest)..'; bGetFastest='..tostring(bGetFastest)) end
    local bIsValid
    for _, sBlueprint in tValidBlueprints do
        bIsValid = false
        if EntityCategoryContains(categories.TECH3, sBlueprint) then iCurrentTech = 3
        elseif EntityCategoryContains(categories.TECH2, sBlueprint) then iCurrentTech = 2
        else iCurrentTech = 1
        end
        if iCurrentTech >= iHighestTech then
            if bGetSlowest == false and bGetFastest == false then bIsValid = true
            else
                oCurBlueprint = __blueprints[sBlueprint]
                iCurSpeed = oCurBlueprint.Physics.MaxSpeed
                if bDebugMessages == true then LOG(sFunctionRef..': sBlueprint='..sBlueprint..'; iCurSpeed='..iCurSpeed) end
                if bGetSlowest == true then
                    if iCurSpeed <= tiLowestSpeedByTech[iHighestTech] then bIsValid = true end
                elseif iCurSpeed >= tiHighestSpeedByTech[iHighestTech] then bIsValid = true
                end
            end

            if bIsValid == true then
                iBestBlueprints = iBestBlueprints + 1
                tBestBlueprints[iBestBlueprints] = sBlueprint
                if bDebugMessages == true then LOG(sFunctionRef..': Have valid blueprint='..sBlueprint) end
            end
        end
    end

    local iBPToBuild = math.random(1, iBestBlueprints)
    return tBestBlueprints[iBPToBuild]
end

function DetermineWhatToBuild(aiBrain, oFactory)
    --Returns unit BP ID to be built
    local bDebugMessages = false
    local sFunctionRef = 'DetermineWhatToBuild'
    local oFactoryBlueprint = oFactory:GetBlueprint()
    local sBPIDToBuild
    local iStrategy = aiBrain[M27Overseer.refiAIBrainCurrentStrategy]
    local bGetSlowest, bGetFastest

    if iStrategy == nil then
        iStrategy = M27Overseer.refStrategyLandEarly
        aiBrain[M27Overseer.refiAIBrainCurrentStrategy] = iStrategy
    end
    if oFactoryBlueprint then
        local iBlueprintFactionNumber = M27Utilities.GetFactionFromBP(oFactoryBlueprint)
        local iFactionCat = M27Utilities.FactionIndexToCategory(iBlueprintFactionNumber)
        local iCategoryToBuild
        local iMaxLoop = 100
        local iCurrentConditionToTry = 1
        while sBPIDToBuild == nil do
            bGetFastest = false
            bGetSlowest = false
            iCategoryToBuild = nil
            --Determine the next unit that want depending on general strategy
            if iStrategy == M27Overseer.refStrategyLandEarly then
                if bDebugMessages == true then LOG(sFunctionRef..': iStrategy='..iStrategy..': iCurrentConditionToTry='..iCurrentConditionToTry) end
                if iCurrentConditionToTry == 1 then --First want 4 engis
                    if M27Conditions.LifetimeBuildCountLessThan(aiBrain, refCategoryEngineer,  iInitialEngineersWanted + 1) == true then
                        local tEngineers = aiBrain:GetListOfUnits(refCategoryEngineer, false, true)
                        local iEngineers
                        if M27Utilities.IsTableEmpty(tEngineers) == true then iEngineers = 0
                        else iEngineers = table.getn(tEngineers) end
                        if iEngineers < 4 then
                            iCategoryToBuild = refCategoryEngineer
                        end
                    end
                elseif iCurrentConditionToTry == 2 then --Want 2 microbots initially:
                    if M27Conditions.LifetimeBuildCountLessThan(aiBrain, refCategoryAttackBot, M27Overseer.iInitialRaiderPlatoonsWanted + 1) == true then
                        iCategoryToBuild = refCategoryAttackBot
                        bGetFastest = true
                    end
                elseif iCurrentConditionToTry == 3 then --Scouts
                    if aiBrain[M27Overseer.refbNeedScoutsBuilt] == true then iCategoryToBuild = refCategoryLandScout end
                elseif iCurrentConditionToTry == 4 then --MAA
                    if aiBrain[M27Overseer.refbNeedMAABuilt] == true then iCategoryToBuild = refCategoryMAA end
                elseif iCurrentConditionToTry == 5 then --Engis to avoid overflow
                    if M27Conditions.ExcessMassIncome(aiBrain, 2) == true and M27Conditions.AtLeastXMassStored(aiBrain, 150) == true then
                        iCategoryToBuild = refCategoryEngineer end
                else
                    iCategoryToBuild = refCategoryDFTank
                    bGetSlowest = true
                end
            else
                M27Utilities.ErrorHandler('Dont have a strategy for factory, will build engineers')
                iCategoryToBuild = categories.ENGINEER * iFactionCat
            end
            if not(iCategoryToBuild == nil) then
                if sBPIDToBuild == nil then
                    sBPIDToBuild = GetBlueprintsThatCanBuildOfCategory(iCategoryToBuild, oFactory, bGetSlowest, bGetFastest)
                end
            end

            iCurrentConditionToTry = iCurrentConditionToTry + 1
            if iCurrentConditionToTry > iMaxLoop then break end
        end
    else
        M27Utilities.ErrorHandler('Blueprint is nil')
    end
    return sBPIDToBuild
end

function LandFactoryOverseer(aiBrain)
    local bDebugMessages = false
    local sFunctionRef = 'LandFactoryOverseer'
    local tAllFactories = {}
    local iFactoryCategory = categories.CONSTRUCTION * categories.LAND * categories.FACTORY * categories.STRUCTURE
    local tCurCommandQueue
    while aiBrain do
        tAllFactories = aiBrain:GetListOfUnits(iFactoryCategory, true, true)
        if tAllFactories then
            for iFactory, oFactory in tAllFactories do
                if not(oFactory:IsUnitState('BeingBuilt')) then
                    if not(oFactory:IsUnitState('Building')) and not(oFactory:IsUnitState('Guarding')) then
                        if M27Utilities.IsTableEmpty(oFactory:GetCommandQueue()) == true then
                            IssueBuildFactory({ oFactory }, DetermineWhatToBuild(aiBrain, oFactory), 1)
                        end
                    end
                end
            end
        end

        WaitTicks(1)
        if aiBrain:IsDefeated() then break end
    end
end